
・WWWinit()
　初期化。

・HTTPGetContents()/HTTPGetContentsSync()
  コンテンツの取得処理。-Sync()だと同期で実行。
  以前と違ってHTTPGetContents()の方が非同期になってるので注意。
  両方とも戻り値がHTTP*関数の第一引数に与えるためのコンテキストになってます。
  非同期版はウィンドウメッセージのlParamでもコンテキストを取得できます。
  非同期版のwParam、同期版のresultは0か1しかかえって来ません。
  0が失敗、1が成功です。

・HTTPGetResponseCode()/HTTPGetCRC32()/HTTPGetContentsLength()/HTTPGetFilteredCRC32()
　それぞれ整数型幅でデータが入るので失敗しません。
　戻り値をそのまま使ってください。

・HTTPContentsSave()
　ファイル保存用。ファイル名とかあけてみて確認してるので、/dev/con/con
　とかヤバげなのは避けてください。

・HTTPGetlastModified()
　文字列長がコンテンツとってみないと確定できないので
　一度目は第2引数にNULLを指定して呼び出すことで必要な文字列長が戻ります。
　それの分以上のメモリを確保後、第2引数にそのメモリのポインタを指定して
　呼び出すことで日付がコピーされます。

・HTTPCleanUp()
　HTTPGetContents()/HTPGetContentsSync()で作成されたコンテキストを破棄します。
　呼び出し以降、引数のコンテキストは無効になります。

・RegexCompile()
　正規表現パターンを与えて正規表現コンテキストを作成します。
　以降のRegex*はこのコンテキストを与えてください。
　RegexMatcher()のHTTP*のハンドルに依存しないので一度作成して何度も
　RegexMatcher()で使いまわすことが出来ます。

・RegexMatcher()
　Webコンテンツの内容を正規表現コンテキストのマッチパターンを使ってマッチ
　文字列を受け取ります。この関数も受け取り文字列の長さがわからないので
　第3引数をNULLで一度呼び出すか、HTTPGetContentsLength()の長さ分だけ
　バッファを確保する（富豪的！！(笑)）ことで対応してください。

・Regexterminate()
　RegexCompile()で作成したコンテキストを破棄します。

・WWWTerminate()
　終了処理。WWWInit()の戻り値を与えてね。

こんな感じでひとつよろしく。
